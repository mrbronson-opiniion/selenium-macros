{
  "Name": "Get Google",
  "CreationDate": "2024-2-1",
  "Commands": [
    {
      "Command": "open",
      "Target": "https://www.google.com/search?q=search&oq=search&gs_lcrp=EgZjaHJvbWUyDAgAEEUYORixAxiABDINCAEQABiDARixAxiABDIGCAIQRRg8MgYIAxBFGDwyBggEEEUYPDIGCAUQRRg8MgYIBhBFGDwyBggHEEUYPNIBCDY4MzVqMGo3qAIAsAIA&sourceid=chrome&ie=UTF-8",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "css=#tsf > div:nth-child(1) > div.A8SBwf > div.RNNXgb > div > div.dRYYxd > div.BKRPef > div > span > svg > path",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "type",
      "Target": "xpath=//textarea",
      "Value": "${location_name} ${location_street} ${location_city} ${location_state} ${location_zip}",
      "Description": ""
    },
    {
      "Command": "store",
      "Target": "2",
      "Value": "!timeout_wait",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "css=#tsf > div:nth-child(1) > div.A8SBwf > div.RNNXgb > button > div > span > svg > path",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "store",
      "Target": "10",
      "Value": "!timeout_wait",
      "Description": ""
    },
    {
      "Command": "waitForPageToLoad",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "pause",
      "Target": "500",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "sourceExtract",
      "Target": "regex=Write a review",
      "Value": "exists",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "if (${exists} != \"#nomatchfound\") {\n  return true;\n}\nreturn false;",
      "Value": "google_valid",
      "Description": ""
    },
    {
      "Command": "comment",
      "Target": "if // ${google_valid}",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "comment",
      "Target": "storeText // xpath=//div[3]/div/div/div/div/div[2]/div/div/div/div/div/div/span[2]",
      "Value": "google_address",
      "Description": ""
    },
    {
      "Command": "comment",
      "Target": "executeScript_Sandbox // return ${location_street} + \", \" + ${location_city} + \", \" + ${location_state} + \" \" + ${location_zip};",
      "Value": "crm_address",
      "Description": ""
    },
    {
      "Command": "comment",
      "Target": "executeScript // function levenshteinDistance(a, b) {\n  const matrix = [];\n\n  // Increment along the first column of each row.\n  for (let i = 0; i <= b.length; i++) {\n    matrix[i] = [i];\n  }\n\n  // Increment each column in the first row.\n  for (let j = 0; j <= a.length; j++) {\n    matrix[0][j] = j;\n  }\n\n  // Fill in the rest of the matrix.\n  for (let i = 1; i <= b.length; i++) {\n    for (let j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1) == a.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                                Math.min(matrix[i][j - 1] + 1, // insertion\n                                         matrix[i - 1][j] + 1)); // deletion\n      }\n    }\n  }\n\n  return matrix[b.length][a.length];\n}\n\nfunction similarity(str1, str2) {\n  const distance = levenshteinDistance(str1, str2);\n  const longestLength = Math.max(str1.length, str2.length);\n\n  if (longestLength === 0) {\n    return 100; // both strings are empty\n  }\n\n  return (1 - distance / longestLength) * 100;\n}\n\nif (similarity(${google_address}, ${crm_address}) < 50.0) {\n  return false;\n}\nreturn true;",
      "Value": "google_valid",
      "Description": ""
    },
    {
      "Command": "comment",
      "Target": "end // ",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "if",
      "Target": "${google_valid}",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "executeScript",
      "Target": "function extractPhoneNumber(xpath) {\n    // Function to find an element by XPath\n    function getElementByXpath(path) {\n        return document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n    }\n\n    // Get the element using the provided XPath\n    const element = getElementByXpath(xpath);\n\n    // Regular expression to match the phone number format (999) 999-9999\n    const phoneRegex = /\\(\\d{3}\\) \\d{3}-\\d{4}/;\n\n    // Function to search for a phone number recursively in the element and its children\n    function searchPhoneNumber(node) {\n        if (!node) return null;\n\n        // If the current node is a text node, check for phone number\n        if (node.nodeType === Node.TEXT_NODE) {\n            const matches = node.nodeValue.match(phoneRegex);\n            if (matches) return matches[0];\n        }\n\n        // Recursively search in child nodes\n        for (let child of node.childNodes) {\n            const phoneNumber = searchPhoneNumber(child);\n            if (phoneNumber) return phoneNumber;\n        }\n\n        return null;\n    }\n\n    // Search for the phone number in the element and its children\n    return searchPhoneNumber(element);\n}\n\n// Example usage\nreturn extractPhoneNumber('/html/body/div[6]/div/div[12]/div[2]/div[3]/div/div[2]/div');\n",
      "Value": "phone",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "return ${num_platforms} + 1;",
      "Value": "num_platforms",
      "Description": ""
    },
    {
      "Command": "sourceSearch",
      "Target": "regex=>[1-5]\\.[0-9]<",
      "Value": "score_found",
      "Description": ""
    },
    {
      "Command": "if",
      "Target": "${score_found} != 0",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "sourceExtract",
      "Target": "regex=>[1-5]\\.[0-9]<",
      "Value": "score",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "x = ${score};\nx = x.slice(1,4);\nreturn x;",
      "Value": "google_score",
      "Description": ""
    },
    {
      "Command": "sourceExtract",
      "Target": "regex=[0-9]+ Google reviews?",
      "Value": "numRatings",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "x = ${numRatings};\nx = x.split(' ');\nx = x[0];\nreturn x",
      "Value": "google_ratings",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "if_v2",
      "Target": "${score_found} == 0",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "store",
      "Target": "0",
      "Value": "google_score",
      "Description": ""
    },
    {
      "Command": "store",
      "Target": "0",
      "Value": "google_ratings",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "storeAttribute",
      "Target": "linkText=Write a review@data-pid",
      "Value": "pid",
      "Description": "stores pid of review button"
    },
    {
      "Command": "store",
      "Target": "https://search.google.com/local/writereview?placeid=${pid}",
      "Value": "google_rotator",
      "Description": ""
    },
    {
      "Command": "open",
      "Target": "${google_rotator}",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "store",
      "Target": "${!URL}",
      "Value": "scraper",
      "Description": ""
    },
    {
      "Command": "executeScript",
      "Target": "indexOfLrd = ${scraper}.indexOf('#lrd=');\nif (indexOfLrd === -1) {\n  return ${scraper};\n}\nreturn ${scraper}.substring(0, indexOfLrd);",
      "Value": "google_scraper",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    }
  ]
}