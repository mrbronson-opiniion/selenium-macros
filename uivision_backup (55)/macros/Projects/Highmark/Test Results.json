{
  "Name": "Test Results",
  "CreationDate": "2024-2-1",
  "Commands": [
    {
      "Command": "executeScript",
      "Target": "function getRandomNumbersList(min, max, count) {\n  let numbers = [];\n  for (let i = 0; i < count; i++) {\n    let randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    numbers.push(randomNumber);\n  }\n  return numbers;\n}\n\nreturn getRandomNumbersList(3, 369, 10);",
      "Value": "test_indexes",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "return [\n  \"[Reviewer_Name],\\n\\nWe’d like to apologize for anything less than a positive experience with us. We’ve taken your feedback and will work hard to implement the needed changes at [Location_Name]. I’d love to make things right! Please reach out to me at your earliest convenience.\\n\\n[Contact_Name], [Contact_Title], [Company_Email]\",\n  \"Dear [Reviewer_Name],\\n\\nWe are so sorry we did not meet your expectations. We’d love to make this situation right and provide a solution that will result in a more positive experience. I hope to hear from you soon.\\n\\n[Contact_Name], [Contact_Title], [Company_Email]\",\n  \"Dear [Reviewer_Name],\\n\\nThank you for bringing this to our attention. We apologize for the experience you had at [Location_Name] and want to work to provide a solution for you. Please feel free to contact me at [Company_Phone]; I’d love to learn more about the situation and how we can fix it.\\n\\n[Contact_Name], [Contact_Title]\",\n  \"[Reviewer_Name],\\n\\nI’m so sorry — it sounds like we missed the mark on your experience at [Location_Name]. Can we make it up to you? Please reach out to me directly at [Company_Email].\\n\\n[Contact_Name], [Contact_Title]\",\n  \"Dear [Reviewer_Name],\\n\\nWe hear you. Thank you for taking the time to bring this to our attention. We apologize for the experience you had at [Location_Name] and want to fix it. Reach me directly at [Company_Phone].\\n\\n[Contact_Name], [Contact_Title]\",\n  \"[Reviewer_Name],\\n\\nEven though we did not meet your expectations, we appreciate your rating. We hope to learn from your candid feedback and make things right. Please let me know how I can make it up to you. Feel free to contact me directly at [Company_Email]\\n\\n[Contact_Name], [Contact_Title]\",\n  \"[Reviewer_Name],\\n\\nThank you for letting us know about your experience. Your feedback — negative or positive — helps [Location_Name] improve. We are looking into this issue and hope to make it up to you. Feel free to call me at [Company_Phone]\\n\\n[Contact_Name], [Contact_Title]\",\n  \"[Reviewer_Name],\\n\\nIt sounds like your experience at [Location_Name] did not meet your expectations or the standard of service we provide to our customers. We hope we can make it up to you — please reach out to me at [Company_Email] at your earliest convenience!\\n\\n[Contact_Name], [Contact_Title]\",\n  \"Dear [Reviewer_Name],\\n\\nWe take your experience with us very seriously and sincerely apologize for any disappointment. We will be looking into this further. Please contact me at [Company_Email]. I hope to work with you to resolve any issues as soon as possible.\\n\\n[Contact_Name], [Contact_Title]\",\n  \"[Reviewer_Name],\\n\\nWe apologize for your experience with us at [Location_Name]. We hope to connect with you soon to provide a better experience than the [rating] rated service you received. Please reach out to me directly at [Company_Email] so I can make it right!\\n\\n[Contact_Name], [Contact_Title]\"\n]",
      "Value": "neg_replies",
      "Description": ""
    },
    {
      "Command": "forEach",
      "Target": "test_indexes",
      "Value": "test",
      "Description": ""
    },
    {
      "Command": "executeScript",
      "Target": "return true;",
      "Value": "test_success",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "xpath=//*[@id=\"location-button\"]/span/span",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "storeText",
      "Target": "xpath=//div[3]/div/div/div/div[2]/div/div/div[${test}]/span",
      "Value": "location",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "xpath=//div[3]/div/div/div/div[2]/div/div/div[${test}]/span",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "xpath=//*[@id=\"app\"]/div[3]/div[2]/div/div/div[2]/div/div/button/span",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "xpath=//*[@id=\"app\"]/div[3]/div[2]/div/div[5]/div/div/footer/div/div[2]/button/span",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "xpath=//*[@id=\"app\"]/div[3]/div[2]/div/div[5]/div/div/footer/div/div[2]/button/span",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "storeText",
      "Target": "xpath=//*[@id=\"pane-0\"]/div/div",
      "Value": "pos_selected",
      "Description": ""
    },
    {
      "Command": "if",
      "Target": "${pos_selected} != \"8 Selected\"",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "return false;",
      "Value": "test_success",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "xpath=//*[@id=\"pane-0\"]/div[2]/div/div",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "storeAttribute",
      "Target": "xpath=/html/body/div[1]/div/div[3]/div[2]/div/div[5]/div/div/div/div/div/div[2]/div[2]/div[1]/div[2]/div[1]/div[3]/div/label/span@class",
      "Value": "second_pos_sr",
      "Description": ""
    },
    {
      "Command": "if",
      "Target": "${second_pos_sr} == \"el-checkbox__input is-checked\"",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "return false;",
      "Value": "test_success",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "id=tab-1",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "storeValue",
      "Target": "xpath=//div[2]/div[2]/div/div[3]/div/div/textarea",
      "Value": "second_neg_sr",
      "Description": ""
    },
    {
      "Command": "executeScript",
      "Target": "function stringSimilarity(str1, str2) {\n  // Calculate Levenshtein distance\n  function levenshteinDistance(a, b) {\n    const matrix = Array.from({ length: a.length + 1 }, (_, i) => [i]);\n    matrix[0] = Array.from({ length: b.length + 1 }, (_, j) => j);\n\n    for (let i = 1; i <= a.length; i++) {\n      for (let j = 1; j <= b.length; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j - 1] + cost\n        );\n      }\n    }\n\n    return matrix[a.length][b.length];\n  }\n\n  const distance = levenshteinDistance(str1, str2);\n  const longestLength = Math.max(str1.length, str2.length);\n  const similarity = ((longestLength - distance) / longestLength) * 100;\n\n  return similarity.toFixed(2);\n}\n\nreturn stringSimilarity(${second_neg_sr}, ${neg_replies[1]}) < 90;\n",
      "Value": "sus",
      "Description": ""
    },
    {
      "Command": "if",
      "Target": "${sus}",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "return false;",
      "Value": "test_success",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "storeValue",
      "Target": "xpath=//div[2]/div[2]/div/div[10]/div/div/textarea",
      "Value": "ninth_neg_sr",
      "Description": ""
    },
    {
      "Command": "executeScript",
      "Target": "function stringSimilarity(str1, str2) {\n  // Calculate Levenshtein distance\n  function levenshteinDistance(a, b) {\n    const matrix = Array.from({ length: a.length + 1 }, (_, i) => [i]);\n    matrix[0] = Array.from({ length: b.length + 1 }, (_, j) => j);\n\n    for (let i = 1; i <= a.length; i++) {\n      for (let j = 1; j <= b.length; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j - 1] + cost\n        );\n      }\n    }\n\n    return matrix[a.length][b.length];\n  }\n\n  const distance = levenshteinDistance(str1, str2);\n  const longestLength = Math.max(str1.length, str2.length);\n  const similarity = ((longestLength - distance) / longestLength) * 100;\n\n  return similarity.toFixed(2);\n}\n\nreturn stringSimilarity(${ninth_neg_sr}, ${neg_replies[8]}) < 90;\n",
      "Value": "sus",
      "Description": ""
    },
    {
      "Command": "if",
      "Target": "${sus}",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "return false;",
      "Value": "test_success",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "click",
      "Target": "css=#app > div.main-content > div.el-card.is-always-shadow.feedback.main-content-view > div > div:nth-child(5) > div > div > header > button > i > svg",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "if",
      "Target": "${test_success}",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "echo",
      "Target": "Test for ${location} succeeded.",
      "Value": "green",
      "Description": ""
    },
    {
      "Command": "else",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "echo",
      "Target": "Test for ${location} failed.",
      "Value": "red",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    },
    {
      "Command": "end",
      "Target": "",
      "Value": "",
      "Description": ""
    }
  ]
}